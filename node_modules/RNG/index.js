 //Comment comment2
var RNG = exports.RNG = function (seed) { 
  // LCG using GCC's constants 
  this.m = 0x100000000; // 2**32; 
  this.a = 1103515245; 
  this.c = 12345; 
  this.state = seed ? seed : Math.floor(Math.random() * (this.m-1)); 
}

RNG.prototype.nextInt = function() { 
  this.state = (this.a * this.state + this.c) % this.m; 
  return this.state; 
}

RNG.prototype.nextFloat = function() { 
  // returns in range [0,1]
  return this.nextInt() / (this.m - 1); 
}

RNG.prototype.nextRange = function(start, end) { 
  // returns in range [start, end): including start, excluding end 
  // can't modulu nextInt because of weak randomness in lower bits 
  var rangeSize = end - start; 
  var randomUnder1 = this.nextInt() / this.m; 
  return start + Math.floor(randomUnder1 * rangeSize); 
} 

RNG.prototype.choice = function(array) { 
  return array[this.nextRange(0, array.length)]; 
} 

RNG.prototype.dice = function(number, dice, plus) {
	var s = 0;
	for (var i = 0; i < number; i++){
		s = s + this.nextRange(1, dice+1);
	}
	  return s + plus; 
}

RNG.prototype.init = function(seed) {
	this.m = 0x100000000; // 2**32; 
	this.a = 1103515245; 
	this.c = 12345; 
	this.state = seed ? seed : Math.floor(Math.random() * (this.m-1));
}